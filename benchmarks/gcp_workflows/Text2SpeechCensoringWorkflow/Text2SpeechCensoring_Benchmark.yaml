main:
    params: [input]
    steps:
    - init:
        assign:
        - projectID: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
        - location: ${sys.get_env("GOOGLE_CLOUD_LOCATION")}
        - getInput_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/Benchmark_Text2SpeechCensoring_GetInput"}
        - text2speech_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/Benchmark_Text2SpeechCensoring_Text2Speech"}
        - conversion_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/Benchmark_Text2SpeechCensoring_Conversion"}
        - compression_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/Benchmark_Text2SpeechCensoring_Compression"}
        - profanity_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/Benchmark_Text2SpeechCensoring_Profanity"}
        - censor_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/Benchmark_Text2SpeechCensoring_Censor"}
        - compression_out: {}
        - profanity_out: {}
    - get_input:
        call: http.post
        args:
          url: ${getInput_url}
          body:
              message: ${input.message}
          auth:
              type: OIDC    
        result: getInputOutput
    - parallelStep:
          parallel:
            shared: [compression_out, profanity_out]
            branches:
              - compress:
                  steps:
                    - text2speech:
                        call: http.post
                        args:
                          url: ${text2speech_url}
                          body:
                              message: ${getInputOutput.body.body.data.message}
                              reqID: ${getInputOutput.body.body.data.reqID}
                          auth:
                              type: OIDC    
                        result: text2speechOutput
                    - conversion:
                        call: http.post
                        args:
                          url: ${conversion_url}
                          body:
                              message: ${text2speechOutput.body.body.data.message}
                              reqID: ${text2speechOutput.body.body.data.reqID}
                          auth:
                              type: OIDC    
                        result: conversionOutput
                    - compression:
                        call: http.post
                        args:
                          url: ${compression_url}
                          body:
                              message: ${conversionOutput.body.body.data.message}
                              reqID: ${conversionOutput.body.body.data.reqID}
                          auth:
                              type: OIDC    
                        result: compression_out
              - callProfanity:
                  steps:
                    - profanity:
                        call: http.post
                        args:
                          url: ${profanity_url}
                          body:
                              message: ${getInputOutput.body.body.data.message}
                              reqID: ${getInputOutput.body.body.data.reqID}
                          auth:
                              type: OIDC    
                        result: profanity_out
    - censor:
          call: http.post
          args:
              url: ${censor_url}
              body:
                  reqID: ${profanity_out.body.body.data.reqID}
                  convertedFileName: ${compression_out.body.body.data.message}
                  indexes: ${profanity_out.body.body.data.message}
              auth:
                  type: OIDC    
          result: finalOutput
    - end_process:
          return: 
            - ${finalOutput.body}