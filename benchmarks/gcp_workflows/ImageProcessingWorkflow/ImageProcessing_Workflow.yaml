main:
    params: [input]
    steps:
    - init:
        assign:
        - projectID: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
        - location: ${sys.get_env("GOOGLE_CLOUD_LOCATION")}
        - getinput_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/BenchMark_IP_GetInput"}
        - flip_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/BenchMark-IP-Flip"}
        - rotate_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/BenchMark_IP_Rotate"}
        - filter_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/Benchmark_IP_Filter"}
        - gray_scale_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/Benchmark_IP_Gray_Scale"}
        - resize_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/Benchmark_IP_Resize"}
        - upload_url: ${"https://" + location + "-" + projectID + ".cloudfunctions.net/BenchMark_IP_Upload_To_Blob"}
    - getInput:
        call: http.post
        args:
          url: ${getinput_url}
          body:
              message: ${input.fileName}
          auth:
              type: OIDC    
        result: flipInput 
    - flip:
        call: http.post
        args:
          url: ${flip_url}
          body:
              message: ${flipInput.body}
          auth:
              type: OIDC    
        result: rotateInput 
    - rotate:
        call: http.post
        args:
          url: ${rotate_url}
          body:
              message: ${rotateInput.body}
          auth:
              type: OIDC    
        result: filterInput
    - filter:
        call: http.post
        args:
          url: ${filter_url}
          body:
              message: ${filterInput.body}
          auth:
              type: OIDC    
        result: grayscaleInput 
    - gray_scale:
        call: http.post
        args:
          url: ${gray_scale_url}
          body:
              message: ${grayscaleInput.body}
          auth:
              type: OIDC    
        result: resizeInput
    - resize:
        call: http.post
        args:
          url: ${resize_url}
          body:
              message: ${resizeInput.body}
          auth:
              type: OIDC    
        result: finalImage       
    - end_process:
        return: 
          - ${finalImage.body}